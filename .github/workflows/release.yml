name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_NET_GIT_FETCH_WITH_CLI: true

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: bangumi-rules-builder-windows-x86_64
            extension: .exe
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: bangumi-rules-builder-windows-i686
            extension: .exe

          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: bangumi-rules-builder-linux-x86_64
            extension: ''
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: bangumi-rules-builder-linux-aarch64
            extension: ''

          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: bangumi-rules-builder-macos-x86_64
            extension: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: bangumi-rules-builder-macos-aarch64
            extension: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation dependencies
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update
          # Install cross-compilation tools for ring crate
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            # Install minimal cross-compilation toolchain
            sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
            # Set up cross-compilation environment
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          fi
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Ensure 7zip is installed (check first to avoid conflicts)
          if ! choco list --local-only | findstr /B "7zip" >nul; then
            choco install 7zip -y
          else
            echo "7zip already installed, skipping installation."
          fi
        fi

    - name: Build release binary
      shell: bash
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          aarch64-linux-gnu-strip target/${{ matrix.target }}/release/bangumi-rules-builder${{ matrix.extension }}
        else
          strip target/${{ matrix.target }}/release/bangumi-rules-builder${{ matrix.extension }}
        fi

    - name: Package Python editor
      shell: bash
      run: |
        # Copy Python editor files
        mkdir -p dist
        cp qb_rule_editor.py dist/
        cp EDITOR_README.md dist/

    - name: Build Python executable
      shell: bash
      run: |
        # Install Python and PyInstaller
        python -m pip install --upgrade pip
        pip install pyinstaller

        # Build executable with appropriate options for each platform
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Windows: no console window
          pyinstaller --onefile --noconsole --name "qb-rule-editor" qb_rule_editor.py
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          # Linux: build executable
          pyinstaller --onefile --name "qb-rule-editor" qb_rule_editor.py
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          # macOS: build executable
          pyinstaller --onefile --name "qb-rule-editor" qb_rule_editor.py
        fi

    - name: Create release archive
      shell: bash
      run: |
        mkdir -p release-package

        # Copy binary and files
        cp target/${{ matrix.target }}/release/bangumi-rules-builder${{ matrix.extension }} release-package/
        # Copy Python editor files
        cp -r dist/* release-package/
        # Copy configuration templates
        cp tasks.json release-package/tasks.json.example
        cp README.md release-package/

        # Create archive
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Try 7zip first, fallback to PowerShell Compress-Archive
          if command -v 7z &> /dev/null; then
            7z a ${{ matrix.artifact_name }}.zip release-package/*
          else
            powershell -Command "Compress-Archive -Path 'release-package/*' -DestinationPath '${{ matrix.artifact_name }}.zip' -Force"
          fi
        else
          tar czf ${{ matrix.artifact_name }}.tar.gz -C release-package .
        fi

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.*

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Display structure of downloaded files
      shell: bash
      run: ls -R

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/*.zip
          **/*.tar.gz
        generate_release_notes: true

